@use '../../variables/variables' as *;
@use '../../mixins/mixins' as mixin;
@use "sass:math";

// Shapes 
.circle {
  border-radius: 100%;
}

.rounded {
  border-radius: 100rem;
}

.radius {
  border-radius: $border-radius;
}

@for $radius from 2 through 20 {
  @if $radius % 2 == 0 {
    .radius-#{$radius} {
      border-radius: $radius + px;
    }
    .radius-top-#{$radius} {
      border-top-left-radius: $radius + px;
      border-top-right-radius: $radius + px;
    }
    .radius-bottom-#{$radius} {
      border-bottom-left-radius: $radius + px;
      border-bottom-right-radius: $radius + px;
    }
    .radius-left-#{$radius} {
      border-top-left-radius: $radius + px;
      border-bottom-left-radius: $radius + px;
    }
    .radius-right-#{$radius} {
      border-top-right-radius: $radius + px;
      border-bottom-right-radius: $radius + px;
    }
  }
}

.no-radius {
  border-radius: 0;
}

// Box-shadow
.embossed {
  box-shadow: 0px 0px 2px 0px #00000099;
}

.embossed-left {
  box-shadow: -1px 1px 0px 0px #0000003b;
}

.embossed-right {
  box-shadow: 1px 1px 0px 0px #0000003b;
}

.box-shadow-1 {
 box-shadow: 0px 1px 3px 0px #00000040;
}

.box-shadow-2 {
 box-shadow: 0px 0px 5px 0px #0000004a;
}

.box-shadow-3 {
 box-shadow: 0px 0px 10px 0px #00000036;
}

.box-shadow-4 {
 box-shadow: 0px 3px 16px 1px #00000061;
}

.box-shadow-5 { 
 box-shadow: 0px 3px 24px 0px #00000036;
}

.box-shadow-6 {
 box-shadow: 0px 0px 64px 0px #00000036;
}

// Widths and Heights
@each $fraction in $fractions {
  .width-#{math.floor($fraction)}pct {
    width: $fraction * 1% ;
  }

  .max-width-#{math.floor($fraction)}pct {
    max-width: $fraction * 1% ;
  }
}

.width-auto {
  width: auto;
}

.height-auto {
  height: auto;
}

.height-100pct {
  height: 100%;
}

.height-100vh {
  height: 100vh;
}

.min-height-100 {
  min-height: 100%;
}

.min-height-100-vh {
  min-height: 100vh;
}

.min-content {
  width: min-content;
}

.max-content {
  width: max-content;
}

.fit-content {
  width: fit-content;
}

.min-content-min {
  min-width: min-content
}

.min-content-max {
  max-width: min-content
}

.max-content-min {
  min-width: max-content;
}

.max-content-max {
  max-width: max-content;
}

.fit-content-min {
  min-width: fit-content;
}

.fit-content-max {
  max-width: fit-content;
}

// Display and Visibility
.hide,
.display-none {
  display: none;
}

.show,
.block,
.display-block {
  display: block;
}

.inline {
  display: inline;
}

.inline-block {
  display: inline-block;
}

.flow-root {
  display: flow-root;
}

.contents {
  display: contents;
}

.invisible,
.hidden {
  visibility: hidden;
}

.visible {
  visibility: visible;
}

.pointer-events-none {
  pointer-events: none;
}

.pointer-events-all {
  pointer-events: all;
}

@each $breakpoint in $responsive-breakpoints {
  @include mixin.viewport($breakpoint) {

    // Hide element from 'desktop-large' and above
    // Hide element from 'desktop' and above
    // Hide element from 'tablet-landscape', 'tablet-portrait', 'phone-landscape' and below
    // Hide element from 'phone' only
    .hide-#{$breakpoint} {
      display: none;
    }
    .invisible-#{$breakpoint} {
      visibility: hidden;
    }

    // Show hidden element on 'desktop-large' and above
    // Show hidden element on 'desktop' and above
    // Show hidden element on 'tablet-landscape', 'tablet-portrait', 'phone-landscape' and below
    // Show hidden element on 'phone' only
    .visible-#{$breakpoint} {
      visibility: visible;
    }
    .show-#{$breakpoint}, 
    .block-#{$breakpoint} // Override for 'display:flex/grid/none/etc.'
    {
      display: block;
    }

    // Show hidden flex containers (including unstacked '.row')

    // Show on 'desktop-large' and above
    // Show on 'desktop' and above
    // Show on 'tablet-landscape', 'tablet-portrait', 'phone-landscape' and below
    // Show on 'phone' only
    .f-show-#{$breakpoint}, 

    // General override for 'display: block/none/etc.' 
    // on specific viewports and above/below
    .flex-#{$breakpoint}
    { 
      display: flex;
    }
  }
}

@each $viewport in $single-viewports {
  @include mixin.onlyViewport($viewport) {

    // Hide or show _only_ on a specific viewport
    // 'phone' and 'desktop-large' excluded because 
    // '.hide-phone','.visible-desktop-large' etc. have the same effect
    .hide-#{$viewport}-only {
      display: none;
    }
    .invisible-#{$viewport}-only {
      visibility: hidden;
    }
    .visible-#{$viewport}-only {
      visibility: visible;
    }
    .show-#{$viewport}-only, 
    .block-#{$viewport}-only // Override for 'display:flex/grid/none/etc.'
    {
      display: block;
    }

    // Reveal hidden flex containers (including unstacked '.row'):
    .f-show-#{$viewport}-only, 

    // General override for 'display: block/none/etc.'
    .display-flex-#{$viewport}-only
    { 
      display: flex;
    }
  }
}

// Opacity
// (.opacity-5 = 5%, .opacity-10 = 10% etc.)
@for $alpha from 0 through 20 {
  .opacity-#{math.div( ($alpha * 10), 2 )} {
    opacity: math.div( math.div( $alpha, 10 ), 2 );
  }
}

// Overflow 
// default: 'visible'
.overflow-hidden { // no scrollbars
  overflow: hidden;
}

.overflow-scroll { // always scrollbars, both directions
  overflow: scroll;
}

.overflow-auto { // scrollbars if needed, both directions
  overflow: auto;
}

.overflow-hidden-visible { // only vertical scrollbar
  overflow: hidden visible; // clip horizontal content right side
}

.overflow-visible-hidden { // only horizontal scrollbar
  overflow: visible hidden; // clip vertical content at bottom
}

.overflow-x-hidden { // clip horizontal content
  overflow-x: hidden;
}

.overflow-x-scroll { // horizontal scrollbar
  overflow-x: scroll;
}

.overflow-x-auto { // horizontal scrollbar if parent is too narrow for content
  overflow-x: auto;
}

.overflow-y-hidden { // clip vertical content
  overflow-y: hidden;
}

.overflow-y-scroll { // vertical scrollbar
  overflow-y: scroll;
}

.overflow-y-auto { // vertical scroll if parent is too short for content
  overflow-y: auto;
}

$overflow-values: visible, unset;

@each $val in $overflow-values {
  .overflow-#{$val} {
    overflow: $val;
  }

  .overflow-x-#{$val} {
    overflow-x: $val;
  }

  .overflow-y-#{$val} {
    overflow-y: $val;
  }
}

// Figure
figure {
  margin-bottom: $paragraph-margin-bottom;

  & img {
    margin-bottom: $paragraph-margin-bottom
  }
}
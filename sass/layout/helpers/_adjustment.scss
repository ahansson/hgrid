@use '../../mixins/mixins' as mixin;
@use 'sass:math';

// Pixel Perfect Push & Pull Positioning

// Push Down
@for $px from 1 through 40 {
  .push#{$px}v {
    margin-top: math.div( $px, 10 ) + rem;
  }
}

// Push Left to Right (horizontally)
@for $px from 1 through 40 {
  .push#{$px}h {
    margin-left: math.div( $px, 10 ) + rem;
  }
}

// Pull Up (vertically)
@for $px from 1 through 40 {
  .pull#{$px}v {
    margin-top: math.div( -$px, 10 ) + rem;
  }
}

// Pull Right to Left (horizontally)
@for $px from 1 through 40 {
  .pull#{$px}h {
    margin-left: math.div( -$px, 10 ) + rem;
  }
}

// Pixel Perfect Push & Pull Without Affecting Siblings

// Move Downwards
@for $px from 1 through 40 {
  .translate-push#{$px}v {
    transform: translate(0, (math.div( $px, 10 ) + rem));
  }
}

// Move Upwards
@for $px from 1 through 40 {
  .translate-pull#{$px}v {
    transform: translate(0, (math.div( -$px, 10 ) + rem));
  }
}

// Left to Right
@for $px from 1 through 40 {
  .translate-push#{$px}h {
    transform: translate(math.div( $px, 10 ) + rem);
  }
}

// Right to Left
@for $px from 1 through 40 {
  .translate-pull#{$px}h {
    transform: translate(math.div( -$px, 10 ) + rem);
  }
}

// Positioning
$positions: static, absolute, fixed, relative, sticky, initial, inherit;

@each $pos in $positions {
  @if $pos != initial and $pos != inherit {
    .#{$pos} {
      position: $pos;
    }
  }
  @if $pos == initial {
    .position-#{$pos} {
      position: $pos;
    }
  }
  @if $pos == inherit {
    .position-#{$pos} {
      position: $pos;
    }
  }
}

.absolute-center {
  @include mixin.absolute-center;
}

// Align Positioned Elements
.pos-spread {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

.pos-fill-v {
  top: 0;
  bottom: 0;
}

.pos-fill-h {
  left: 0;
  right: 0;
}

.pos-top-0 {
  top: 0;
}

.pos-bottom-0 {
  bottom: 0;
}

.pos-left-0 {
  left: 0;
}

.pos-right-0 {
  right: 0;
}

// Z-index
@for $i from 1 through 20 {
  .z-index-#{$i} {
    z-index: $i;
  }
}

.z-index-999 {
  z-index: 999;
}

$z-values: auto, inherit, initial, unset;

@each $z in $z-values {
  .z-index-#{$z} {
    z-index: $z;
  }
}

// Object fit

// Specifies how the content of an external object such as an image should 
// be fitted within its container
$values: fill, contain, cover, scale-down;

@each $val in $values {
  .#{$val} {
    object-fit: $val;
  }
}

.object-fit-none {
  object-fit: none;
}

// Alignment for 'inline', 'inline-block' 
// and 'table-cell' elements
$vertical-align-values: top, middle, bottom, text-top, text-bottom, baseline;
// default = baseline (_base.scss)

@each $val in $vertical-align-values {
  .align-#{$val} {
    vertical-align: $val;
  }
}

// Floats and Clears
.fr {
  float: right;
}

.fl {
  float: left;
}

.fn {
  float: none;
}

.clear-left {
  clear: left;
}

.clear-right {
  clear: right;
}

.clear-both {
  clear: right;
}

.clearfix {
  @include mixin.clearfix;
}

.clear-none {
  clear: none;
}
@use "sass:math";
@use '../variables/variables' as *;
@use '../mixins/mixins' as mixin;

// Note: See additional utilities that are relevant for flex 
// under 'Display and Visibility' in 'flex/_flex.scss'


// Flex for Parent Elements

.flex {
  display: flex;
}

.inline-flex {
  display: inline-flex;
}

.f-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

.f-direction-row {
  flex-direction: row;
}

.f-direction-row-reverse {
  flex-direction: row-reverse;
}

.f-direction-column {
  flex-direction: column;
}

.f-direction-column-reverse {
  flex-direction: column-reverse;
}

.f-wrap {
  flex-wrap: wrap;
}

.f-wrap-reverse {
  flex-wrap: wrap-reverse;
}

.f-wrap-nowrap {
  flex-wrap: nowrap;
}

.justify-content-flex-start {
  justify-content: flex-start;
}

.justify-content-flex-end {
  justify-content: flex-end;
}

.justify-content-center {
  justify-content: center;
}

.justify-content-space-between {
  justify-content: space-between;
}

.justify-content-space-around {
  justify-content: space-around;
}

.justify-content-space-evenly {
  justify-content: space-evenly;
}

.align-content-start {
  align-content: flex-start;
}

.align-content-end {
  align-content: flex-end;
}

.align-content-center {
  align-content: center;
}

.align-content-space-between {
  align-content: space-between;
}

.align-content-space-around {
  align-content: space-around;
}

.align-content-space-evenly {
  align-content: space-evenly;
}

$aligns: center, flex-start, flex-end, baseline, stretch, unset;

@each $val in $aligns {
  .align-items-#{$val} {
    align-items: $val; 
  }
}

// Responsive Overrides for Parent Elements
@each $breakpoint in $responsive-breakpoints {
  @include mixin.viewport($breakpoint) {

    // Unset flex container 
    .f-unset-#{$breakpoint} {
      display: unset;
    }

    // Flex wrap reverse
    .f-wrap-reverse-#{$breakpoint} {
      flex-wrap: wrap-reverse;
    }

    // Don't flex-wrap
    .f-wrap-unset-#{$breakpoint} {
      flex-wrap: unset;
    }

    // Change flex-direction
    .f-direction-row-#{$breakpoint} {
      flex-direction: row;
    }

    .f-direction-row-reverse-#{$breakpoint} {
      flex-direction: row-reverse;
    }

    .f-direction-column-#{$breakpoint} {
      flex-direction: column;
    }

    .f-direction-column-reverse-#{$breakpoint} {
      flex-direction: column-reverse;
    }
  }
}

// Flex for Child Elements

.f-grow-1 {
  flex-grow: 1;
}

.f-grow-0 {
  flex-grow: 0;
}

.f-shrink-1 {
  flex-shrink: 1;
}

.f-shrink-0 {
  flex-shrink: 0;
}

.align-self-auto {
  align-self: auto;
}

.align-self-start {
  align-self: flex-start;
}

.align-self-end {
  align-self: flex-end;
}

.align-self-center {
  align-self: center;
}

.align-self-stretch {
  align-self: stretch;
}

@for $i from 1 through 10 {
  .order-#{$i} {
    order: $i;
  }
}

@for $i from 1 through 24 {
  .f-#{$i} {
    // Shorthand for
    //    'flex-grow'
    //    'flex-shrink'
    //    'flex-basis'
    // Used with a single digit, it equals 1 1 0%, 
    // Determines internal element proportions. 
    // '.f-2' is always twice the size of '.f-1' (etc.)
    flex: $i;
  }
}

.f-none {
  flex: none;
}

// Responsive Overrides for Child Elements:
@each $breakpoint in $responsive-breakpoints {
  @include mixin.viewport($breakpoint) {
    // Sets min-width for items, per breakpoint 
    // Determines behavior with '.f-wrap'
    @each $fraction in $fractions {
      .f-#{$breakpoint}-#{math.floor($fraction)} {
        flex: 1 0 ($fraction * 1%)
      }
    }
  }
}

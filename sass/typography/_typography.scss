@use '../variables/variables' as *;
@use '../mixins/mixins' as mixin;

body {
  @include mixin.viewport(phone) {
    font-size: ($font-size * 1.1);
    line-height: ($font-size * 1.6);
  }
  font-size: ($font-size * 1.175);
  line-height: ($font-size * 1.8);
}

// Headings
$title-attributes: (
  h1: 2.75 2.9 1.25 4.14 5 1.75,
  h2: 2.25 2.375 1 3.125 3.5625 1.4,
  h3: 1.875 1.9 .75 2.4 2.85 1,
  h4: 1.8 2.15 .7 1.87 2.15 .8125,
  h5: 1.45 1.82 .7 1.45 1.82 .7,
  h6: 1.25 1.8 .66 1.2 1.8 .66
// values: tablet-font-size, tablet-line-height, tablet-margin-btm, font-size, line-height, margin-btm
);

@each $title, $attr in $title-attributes {
  #{$title},
  .#{$title} {
    @include mixin.title(nth($attr, 1), nth($attr, 2), nth($attr, 3), nth($attr, 4), nth($attr, 5), nth($attr, 6));
  }
}

h1, 
h2, 
h3, 
h4, 
h5, 
h6 {
  font-weight: $headline-weight;
}

// Paragraphs
p {
  margin-bottom: $paragraph-margin-bottom;
}

// Lists
article ul,
article ol,
section ul,
section ol {
  @include mixin.viewport(phone) {
    padding-left: 10%;
  }
  list-style-type: square;
  padding-left: 5%;
  margin: 2rem 0;

  & li {
    margin: 1.4rem 0;
  }
}

article ol,
section ol {
  list-style-type: decimal;
}

// Code formatting
p > code,
em > code,
i > code,
span > code,
small > code,
strong > code,
li > code,
div > code,
dd > code,
figcaption > code,
table td > code,
table th > code {
  background: $inline-code-bg;
  border-radius: 2px;
  box-decoration-break: clone;
  color: $inline-code-color;
  display: inline;
  font-size: $inline-code-size;
  letter-spacing: -0.4px;
  padding: 0.1rem 0.6rem;
  position: relative;
  top: -1px;
  white-space: pre-line;
  word-wrap: break-word;
}

pre {
  margin: 0 0 2rem;

  & > code {
    background: $pre-code-bg;
    border-radius: $border-radius;
    color: $pre-code-color;
    font-size: $pre-code-size;
    display: block;
    letter-spacing: -0.6px;
    line-height: 2.4rem;
    padding: 2rem 2.6rem;
    white-space: pre;
    overflow-x: auto;
  }
}

// Hyperlinks

%nicer-link-styling {
  color: $link-color;
  text-decoration: underline $link-underline-color $link-underline-style;
  text-decoration-thickness: $link-underline-thickness;
  text-underline-offset: $link-underline-offset;
}

@if $use-article-link-underlines == false {
  a,
  p a,
  ul li a,
  ol li a,
  label a,
  span a {
    @if $turn-off-link-decoration == false {

      // Are nicer links turned on 
      // in '_variables.scss'?
      @if $use-global-link-underlines {
        @extend %nicer-link-styling;
      }
      @else {
        color: $link-color;
        text-decoration: underline;
      }
      &:hover {
        color: $link-color-hover;
        text-decoration: none;
      }
    }

    @if $turn-off-link-decoration {

      // Are nicer links turned on 
      // in '_variables.scss'?
      @if $use-global-link-underlines {
        @extend %nicer-link-styling;

        &:hover {
          text-decoration: none;
          color: $link-color-hover;
        }
      }
      @else {
        color: $link-color;
        text-decoration: none;
      }

      &:hover {
        color: $link-color-hover;
      }
    }
  }
}

@else if 
  $use-global-link-underlines == false 
  and $use-article-link-underlines {

  // Are nicer links turned on only in
  // <article> and elements with a '.text-content' class?

    article a,
    article ul li a,
    article ol li a,
    article span a,
    article label a,
    .text-content a,
    .text-content ul li a,
    .text-content ol li a,
    .text-content span a,
    .text-content label a {

      @extend %nicer-link-styling;

      &:hover {
        color: $link-color-hover;
        text-decoration: none;
      }
    }
}

// Text formatting
i,
em,
.italic {
  font-style: italic;
}

blockquote {
  border-left: 3px solid $color-gray-light;
  font-size: ($font-size * 1.5);
  margin-bottom: 2.2rem;
  padding-left: 1.2rem;
  line-height: 3.4rem;
}

small,
.small {
  font-size: $small-font-size;
}

.lowercase {
  text-transform: lowercase;
}

.uppercase {
  text-transform: uppercase;
}

.capitalize {
  text-transform: capitalize;
}

.no-transform {
  text-transform: none;
}

u,
.underline {
  text-decoration: underline;
}

s,
del,
.strike {
  text-decoration: line-through;
}

sub {
  bottom: -0.25rem;
}

sup {
  top: -0.5rem;
}

.no-underline,
.no-decoration,
.no-strike {
  text-decoration: none;
}

mark,
.highlight {
  background: $text-highlight-color;
  padding: 0 .4rem;
}

.shorten {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.ellipsis {
  text-overflow: ellipsis;
}

.clip {
  text-overflow: clip;
}

.normal {
  font-style: normal;
}

.word-break-normal {
  overflow-wrap: normal;
  word-break: normal;
}

.word-break-all {
  word-break: break-all;
}

// Selection
$user-select-values: none, text, all, auto;

@each $val in $user-select-values {
  .user-select-#{$val} {
    user-select: $val;
  }
}

// Cursors
$cursors: not-allowed, move, wait, text, pointer, default, auto;

@each $cursor in $cursors {
  .cursor-#{$cursor} {
    cursor: $cursor;
  }
}

.pointer { // Backwards compatibility
  cursor: pointer;
}

.wait { // Backwards compatibility
  cursor: wait;
}

// Text columns
.two-columns {
  @include mixin.col-format(2);
  @include mixin.viewport(phone) {
    column-count: initial;
  }
}

.three-columns {
  @include mixin.col-format(3);
  @include mixin.viewport(phone-landscape) {
    column-count: 2;
  }

  @include mixin.viewport(phone) {
    column-count: initial;
  }
}

.four-columns {
  @include mixin.col-format(4);
  @include mixin.viewport(tablet-portrait) {
    column-count: 2;
  }

  @include mixin.viewport(phone) {
    column-count: initial;
  }
}

// Text positioning
$text-align-values: center, left, right, justify, inherit, initial, unset, start, end;

@each $val in $text-align-values {
  .text-#{$val} {
    text-align: $val;
  }
}

// Font weight
$weights: 100, 200, 300, 400, 500, 600, 700, 800, 900;
@each $weight in $weights {
  .font-weight-#{$weight} {
    font-weight: $weight;
  }
}

strong,
b,
.bold,
p strong,
a strong,
span strong,
strong a,
strong span {
  font-weight: $font-strong;
}

.font-normal {
  font-weight: normal;
}

// Letter spacing
.spacing-neg-4 {
  letter-spacing: -0.3rem;
}

.spacing-neg-3 {
  letter-spacing: -0.1rem;
}

.spacing-neg-2 {
  letter-spacing: -0.03rem;
}

.spacing-neg-1 {
  letter-spacing: -0.008rem;
}

.spacing-0 {
  letter-spacing: 0;
}

.spacing-1 {
  letter-spacing: 0.008rem;
}

.spacing-2 {
  letter-spacing: 0.03rem;
}

.spacing-3 {
  letter-spacing: 0.1rem;
}

.spacing-4 {
  letter-spacing: 0.3rem;
}

// Text color
.text-light {
  color: $color-light;
}

.text-dark {
  color: $color-dark;
}

.text-white {
  color: #fff;
}

.text-black {
  color: #000;
}

.text-red {
  color: $color-red;
}

.text-green {
  color: $color-green;
}

.text-blue {
  color: $color-blue;
}

.text-orange {
  color: $color-orange;
}

.text-gray-lighter {
  color: $color-gray-lighter;
}

.text-gray-light {
  color: $color-gray-light;
}

.text-gray {
  color: $color-gray;
}

.text-gray-dark {
  color: $color-gray-dark;
}

.text-gray-darker {
  color: $color-gray-darker;
}

// Text antialiasing 
.subpixel-antialiased { 
// Default setting on macOS, gives a stronger type
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
}

.antialiased { 
// hgrid default setting in _base.scss
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
